# Generated by Django 5.0 on 2025-02-08 06:03

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="PatientData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=250)),
                ("patient_mobile_number", models.CharField(max_length=15, unique=True)),
                ("age", models.IntegerField()),
                ("gender", models.CharField(max_length=6)),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Time when the record was created"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="Time when the record was last updated"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PatientDeviceData",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("doctor_id", models.CharField(max_length=50)),
                ("patient_mobile_number", models.CharField(max_length=15)),
                ("device_serial_number", models.CharField(max_length=50)),
                (
                    "co",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "co2",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "o2",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("heart_rate", models.IntegerField(blank=True, null=True)),
                (
                    "spo2",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "nh3",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("full_name", models.CharField(max_length=150)),
                (
                    "designation",
                    models.CharField(blank=True, default="", max_length=100),
                ),
                ("phone_number", models.BigIntegerField(blank=True, null=True)),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("doctor", "Doctor"),
                            ("hospital_staff", "Hospital Staff"),
                            ("admin", "Admin"),
                        ],
                        default="doctor",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="ModelOutput",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "input_text",
                    models.TextField(help_text="Input text provided to the LLM"),
                ),
                (
                    "output_text",
                    models.TextField(help_text="Output text generated by the LLM"),
                ),
                (
                    "doctor_remark",
                    models.TextField(help_text="Doctor's remark", null=True),
                ),
                (
                    "doctor_comment",
                    models.TextField(help_text="Doctor's comment", null=True),
                ),
                ("doctor_note", models.TextField(help_text="Doctor's note", null=True)),
                ("patient_mobile_number", models.CharField(max_length=15)),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Time when the record was created"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="Time when the record was last updated"
                    ),
                ),
                (
                    "sensor_data",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.patientdevicedata",
                    ),
                ),
            ],
        ),
    ]
