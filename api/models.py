from datetime import *
from django.utils import timezone
from django.db import models
from django.contrib.auth.models import AbstractUser
from storages.backends.gcloud import GoogleCloudStorage

class PatientDeviceData(models.Model):
    id = models.AutoField(primary_key=True)
    doctor_id = models.CharField(max_length=50)
    patient_mobile_number = models.CharField(max_length=15)
    device_serial_number = models.CharField(max_length=50)
    co = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    co2 = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    o2 = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    heart_rate = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    spo2 = models.DecimalField(max_digits=5, decimal_places=2, null=True, blank=True)
    nh3 = models.DecimalField(max_digits=10, decimal_places=2,null=True, blank=True)
    o2_delta = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    rq = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    hydrogen = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    formaldehyde = models.DecimalField(max_digits=10, decimal_places=3, null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True, null=False)

    def __str__(self):
        return f"PatientDeviceData(id={self.id}, doctor_id={self.doctor_id}, device_serial_number={self.device_serial_number})"

class PatientData(models.Model):
    name = models.CharField(max_length=250, null=False, blank=False)
    patient_mobile_number = models.CharField(max_length=15, unique=True)
    age = models.IntegerField(null=False, blank=False)
    gender = models.CharField(max_length=6,null=False, blank=False)
    created_at = models.DateTimeField(auto_now_add=True, help_text="Time when the record was created")
    updated_at = models.DateTimeField(auto_now=True, help_text="Time when the record was last updated")

class ModelOutput(models.Model):
    input_text = models.TextField(help_text="Input text provided to the LLM", null=False, blank=False)
    output_text = models.TextField(help_text="Output text generated by the LLM", null=False, blank=False)
    doctor_remark = models.TextField(help_text="Doctor's remark", null=True)
    doctor_comment = models.TextField(help_text="Doctor's comment", null=True)
    doctor_note = models.TextField(help_text="Doctor's note", null=True)
    sensor_data = models.ForeignKey(PatientDeviceData, on_delete=models.CASCADE, null=False, blank=False)
    patient_mobile_number = models.CharField(max_length=15, null=False, blank=False)
    created_at = models.DateTimeField(auto_now_add=True, help_text="Time when the record was created")
    updated_at = models.DateTimeField(auto_now=True, help_text="Time when the record was last updated")

class CustomUser(AbstractUser):
    # A single full name field in place of separate first/last names.
    full_name = models.CharField(max_length=150)
    email_verified = models.BooleanField(null=False, blank=False, default=False)
    
    # Additional fields for registration.
    medication = models.CharField(max_length=100, blank=True, default="")
    phone_number = models.BigIntegerField(null=True, blank=True)

    # Field to differentiate user types.
    ROLE_CHOICES = (
        ('doctor', 'Doctor'),
        ('hospital_staff', 'Hospital Staff'),
        ('admin', 'Admin'),
    )
    role = models.CharField(max_length=20, choices=ROLE_CHOICES, default='doctor')

    device_serial_number = models.CharField(max_length=50, null=True, blank=False)
    device_serial_numbers = models.JSONField(default=list, null=True, blank=True)

    # Timestamps for record keeping.
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    # Optionally override get_full_name to return our full_name.
    def get_full_name(self):
        return self.full_name

    def __str__(self):
        return self.username
    
class LLMOutput(models.Model):
    output_text_1 = models.TextField(help_text="Output text generated by the LLM", null=True, blank=True)
    output_text_2 = models.TextField(help_text="Output text generated by the LLM", null=True, blank=True)
    output_text_3 = models.TextField(help_text="Output text generated by the LLM", null=True, blank=True)
    output_text_4 = models.TextField(help_text="Output text generated by the LLM", null=True, blank=True)
    output_text_5 = models.TextField(help_text="Output text generated by the LLM", null=True, blank=True)
    output_text_6 = models.TextField(help_text="Output text generated by the LLM", null=True, blank=True)
    output_text_7 = models.TextField(help_text="Output text generated by the LLM", null=True, blank=True)
    output_text_8 = models.TextField(help_text="Output text generated by the LLM", null=True, blank=True)
    output_text_9 = models.TextField(help_text="Output text generated by the LLM", null=True, blank=True)
    output_text_10 = models.TextField(help_text="Output text generated by the LLM", null=True, blank=True)
    output_text_11 = models.TextField(help_text="Output text generated by the LLM", null=True, blank=True)
    output_text_12 = models.TextField(help_text="Output text generated by the LLM", null=True, blank=True)
    symptoms = models.TextField(help_text="Symptoms of patient", null=True, blank=True)
    history = models.TextField(help_text="History of patient", null=True, blank=True)
    notes = models.TextField(help_text="Notes of doctor", null=True, blank=True)
    medication_type = models.CharField(max_length=255, help_text="History of patient", null=True, blank=True)
    doctor_remark = models.TextField(help_text="Doctor's remark", null=True)
    doctor_comment = models.TextField(help_text="Doctor's comment", null=True)
    doctor_note = models.TextField(help_text="Doctor's note", null=True)
    sensor_data = models.ForeignKey(PatientDeviceData, on_delete=models.CASCADE, null=False, blank=False)
    patient_mobile_number = models.CharField(max_length=15, null=False, blank=False)
    file_urls = models.JSONField(default=list)
    created_at = models.DateTimeField(auto_now_add=True, help_text="Time when the record was created")
    updated_at = models.DateTimeField(auto_now=True, help_text="Time when the record was last updated")

class OneTimePassword(models.Model):
    user = models.ForeignKey(
        CustomUser,
        on_delete=models.CASCADE,
        related_name='otps',
        db_index=True  # optional, also covered in composite index
    )
    otp = models.PositiveIntegerField(db_index=True)
    expiry = models.DateTimeField(db_index=True)
    is_expired = models.BooleanField(default=False, db_index=True)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        indexes = [
            models.Index(fields=['user', 'is_expired', '-created_at']),
        ]

    def __str__(self):
        return f"OTP for {self.user.email} - {'Expired' if self.is_expired else 'Valid'}"

    def has_expired(self):
        """
        Check if the OTP is expired based on expiry time or is_expired flag.
        """
        if self.is_expired or timezone.now() > self.expiry:
            self.is_expired = True
            self.save(update_fields=['is_expired'])
            return True
        return False

    @staticmethod
    def generate_otp(user, length=6, validity_minutes=10):
        """
        Create a new OTP for a user. Old ones are marked as expired.
        """
        from random import randint

        # Expire previous OTPs
        OneTimePassword.objects.filter(user=user, is_expired=False).update(is_expired=True)

        # Generate a random n-digit OTP
        otp_range = 10**(length-1), 10**length - 1
        otp_code = randint(*otp_range)

        expiry_time = timezone.now() + timedelta(minutes=validity_minutes)
        return OneTimePassword.objects.create(user=user, otp=otp_code, expiry=expiry_time)
